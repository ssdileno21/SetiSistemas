unit ufrmClientes_;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls, Vcl.DBCtrls, Vcl.ComCtrls,
  Vcl.Grids, Vcl.DBGrids, Vcl.StdCtrls, Vcl.Mask, Vcl.Buttons, Data.DB, IBDatabase, DBXCommon,
  Midas, Datasnap.DBClient,Data.SqlExpr;

type
  TfrmClientes_ = class(TForm)
    Panel1: TPanel;
    Panel3: TPanel;
    dbgClientes: TDBGrid;
    Panel4: TPanel;
    sbAbrir: TSpeedButton;
    dsClientes: TDataSource;
    sbInsert: TSpeedButton;
    sbUpdate: TSpeedButton;
    sbDel: TSpeedButton;
    sbSave: TSpeedButton;
    sbCancel: TSpeedButton;
    Panel5: TPanel;
    PageControl1: TPageControl;
    TabSheet1: TTabSheet;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    dbcbxAtivo: TDBCheckBox;
    TabSheet2: TTabSheet;
    Panel2: TPanel;
    DBNavigator1: TDBNavigator;
    Panel6: TPanel;
    Image1: TImage;
    SpeedButton1: TSpeedButton;
    Label5: TLabel;
    Label6: TLabel;
    Label7: TLabel;
    Label8: TLabel;
    Label9: TLabel;
    Label10: TLabel;
    Label11: TLabel;
    Label12: TLabel;
    Label13: TLabel;
    Label14: TLabel;
    Label15: TLabel;
    Label16: TLabel;
    Label18: TLabel;
    dbeCodigo: TEdit;
    dbeNome: TEdit;
    dbeEmail: TEdit;
    dbeCodInterno: TEdit;
    dbrTipoCliente: TRadioGroup;
    dbeCpfCnpj: TEdit;
    dbeTelefone: TEdit;
    dbeCelular: TEdit;
    dbeDatCadastro: TEdit;
    dbeDatMovimentacao: TEdit;
    MemObservacao: TMemo;
    dbeLogradouro: TEdit;
    dbeCep: TEdit;
    dbeNum: TEdit;
    dbeComp: TEdit;
    dbeBairro: TEdit;
    dbeCidade: TEdit;
    dbeUf: TEdit;
    procedure FormCreate(Sender: TObject);
    procedure sbAbrirClick(Sender: TObject);
    procedure sbInsertClick(Sender: TObject);
    procedure sbUpdateClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure sbSaveClick(Sender: TObject);
    procedure sbCancelClick(Sender: TObject);
    procedure sbDelClick(Sender: TObject);
  private
    { Private declarations }
    FStatus : string;
    function GetStatus : string;
    procedure SetStatus(Const Value : string);
    procedure ProviderFlags;
    function ValidaCampos : Boolean;
  public
    { Public declarations }
    procedure Abrir;
    procedure Inserir;
    procedure Editar;
    procedure Deletar;
    procedure Gravar;
    procedure CompControle;
    procedure Criar;
  property qStatus : string read GetStatus write SetStatus;

  end;

var
  frmClientes_: TfrmClientes_;
  TD : TDBXTransaction;

const
      csQry = 'SELECT                   '+
              '   ID                    '+
              '   ,NOME                 '+
              '   ,CODIGOINTERNO        '+
              '   ,EMAIL                '+
              //'   ,TIPOPESSOA           '+
              '   ,CPFCNPJ              '+
              '   ,NUMTELEFONE          '+
              '   ,NUMCELULAR           '+
              //'   ,DATANIVERSARIO       '+
              '   ,DATCADASTRO          '+
              '   ,DATULTMOVIMENTACAO   '+
              '   ,OBSERVACAO           '+
              '   ,LOGRADOUROCEP        '+
              '   ,LOGRADOURO           '+
              '   ,LOGRADOURONUM        '+
              '   ,LOGRADOUROCOMP       '+
              '   ,LOGRADOUROBAIRRO     '+
              '   ,LOGRADOUROUF         '+
              '   ,LOGRADOUROCIDADE     '+
              '   ,STATUS               '+
              'FROM tbclientes          ';
      csTable = 'TBCLIENTES';
      csGen = 'GEN_ID_CLIENTE';
      cdFieldKey_1 = 'ID';



implementation

{$R *.dfm}

uses udmMasterDataModule, uMess, uSetiConfig, udmGen, uSetiUseful;

procedure TfrmClientes_.Criar;
var
  i : Integer;
begin
    try
      try
          with (dmMasterDataModule) do
          begin
              UseComponentsDmSeti(1);
              with (SetiSqlQuery) do
               begin
                SQL.Add(csQry);
                dsClientes.DataSet := SetiCds;
               end
          end;
    finally

    end;
    except on e : exception do
        SetiMens(0,e.Message);
    end;
end;

procedure TfrmClientes_.Deletar;
begin
    try
      if MessageDlg('Confirmar exclusão do registro?',mtConfirmation,
      [mbYes,mbNo],0) = mrYes then
      begin
          dmMasterDataModule.SetiCds.Delete;
          dmMasterDataModule.SetiCds.ApplyUpdates(0);
          dmMasterDataModule.SetiCds.Refresh;
          SetiMens(1,'Registro excluído com sucesso.');
          SetStatus('ABERTO');
          CompControle;
      end;
    except on e : exception do
        SetiMens(0,e.Message);
    end
end;

procedure TfrmClientes_.Editar;
begin
    try
      dbgClientes.DataSource := nil;
      dmMasterDataModule.SetiCds.Edit;
      SetStatus('UPDATE');
      CompControle;
    except on e : exception do
        SetiMens(0,e.Message);
    end
end;

procedure TfrmClientes_.FormCreate(Sender: TObject);
begin
    try
      dmMasterDataModule := TdmMasterDataModule.Create(Nil);
      Criar;
      dmMasterDataModule.fnTableInforFS8F1(csTable);

    except on e : exception do
        SetiMens(0,e.Message);
    end
end;

procedure TfrmClientes_.FormShow(Sender: TObject);
begin
    SetStatus('INICIAL');
    CompControle;
end;

function TfrmClientes_.GetStatus: string;
begin
    Result := FStatus;
end;

procedure TfrmClientes_.Gravar;
begin
    try
      if (qStatus = 'INSERT') or (qStatus = 'UPDATE') then
      begin
        if qStatus = 'INSERT' then
        begin
          dmMasterDataModule.SetiCds.FieldByName('ID').AsInteger :=
            dmGen.ProximoId(csGen);
        end;
        if dbeNome.Text = '' then
        begin
          SetiMens(1,'Nome não informado.');
          Exit;
        end;

      end;

    except on e : exception do
        SetiMens(0,e.Message);
    end
end;

procedure TfrmClientes_.CompControle;
var
  iStatus : Integer;
  reg : Boolean;
  i : Integer;
begin
    try
      if (dmMasterDataModule.SetiCds.IsEmpty) then
        reg := False else reg := True;
      if (qStatus = 'INICIAL') then iStatus := 1 else
      if (qStatus = 'ABERTO') then iStatus := 2 else
      if (qStatus = 'INSERT') then iStatus := 3 else
      if (qStatus = 'UPDATE') then iStatus := 4;
      if (iStatus in [2]) and (reg = False) then iStatus := 0;

  {    for I := 0 to ComponentCount -1 do
      begin
        if Components[i] is TDBEdit then
        begin
          if iStatus = 0 then
            TDBEDIT(Components[i]).ReadOnly := True else
          if iStatus = 1 then
            TDBEDIT(Components[i]).ReadOnly := True else
          if iStatus = 2 then
            TDBEDIT(Components[i]).ReadOnly := True else
          if iStatus = 3 then
            TDBEDIT(Components[i]).ReadOnly := False else
          if iStatus = 4 then
            TDBEDIT(Components[i]).ReadOnly := False else
        end;
      end;}
      if (iStatus in [0]) then  //INICIAL - SEM REGISTRO
      begin
        sbAbrir.Enabled := False;
        sbInsert.Enabled := True;
        sbUpdate.Enabled := False;
        sbDel.Enabled := False;
        sbSave.Enabled := False;
        sbCancel.Enabled := True;
        PageControl1.ActivePageIndex := 0;
        DBNavigator1.Enabled := False;
        {edtDatAniversario.Clear;
        edtDatAniversario.Enabled := False;}
      end else
      if (iStatus in [1]) then  //INICIAL
      begin
        sbAbrir.Enabled := True;
        sbInsert.Enabled := True;
        sbUpdate.Enabled := False;
        sbDel.Enabled := False;
        sbSave.Enabled := False;
        sbCancel.Enabled := False;
        PageControl1.ActivePageIndex := 0;
        DBNavigator1.Enabled := False;
        {edtDatAniversario.Clear;
        edtDatAniversario.Enabled := False;}
      end else
      if (iStatus in [2]) then //ABERTO
      begin
        sbAbrir.Enabled := False;
        sbInsert.Enabled := True;
        sbUpdate.Enabled := True;
        sbDel.Enabled := True;
        sbSave.Enabled := False;
        sbCancel.Enabled := True;
        DBNavigator1.Enabled := True;
        //edtDatAniversario.Enabled := False;
      end else
      if (iStatus in [3]) then //INSERT
      begin
        sbAbrir.Enabled := False;
        sbInsert.Enabled := False;
        sbUpdate.Enabled := False;
        sbDel.Enabled := False;
        sbSave.Enabled := True;
        sbCancel.Enabled := True;
        DBNavigator1.Enabled := False;
        PageControl1.ActivePageIndex := 0;
        dbeNome.SetFocus;
      end else
      if (iStatus in [4]) then //UPDATE
      begin
        sbAbrir.Enabled := False;
        sbInsert.Enabled := False;
        sbUpdate.Enabled := False;
        sbDel.Enabled := False;
        sbSave.Enabled := True;
        sbCancel.Enabled := True;
        DBNavigator1.Enabled := False;
        PageControl1.ActivePageIndex := 0;
        dbeNome.SetFocus;
      end;
    except on e : exception do
        SetiMens(0,e.Message);
    end
end;

procedure TfrmClientes_.Abrir;
var
  i : Integer;
begin
    try
      dmMasterDataModule.SetiCds.Open;
      if NOT (dmMasterDataModule.SetiCds.IsEmpty) then
      begin
        ProviderFlags;
        dbgClientes.DataSource := dsClientes;
        DBNavigator1.DataSource := dsClientes;
        SetStatus('ABERTO');
        {edtDatAniversario.Text :=
          dmMasterDataModule.SetiCds.FieldByName('DATANIVERSARIO').AsString;}
      end else
        SetStatus('INICIAL');
      CompControle;
    except on e : exception do
        SetiMens(0,e.Message);
    end;
end;

procedure TfrmClientes_.Inserir;
begin
    try
      dmMasterDataModule.SetiCds.Open;
      dbgClientes.DataSource := nil;
      dmMasterDataModule.SetiCds.Append;
      dmGen := TdmGen.Create(Nil);
      dmMasterDataModule.SetiCds.FieldByName('ID').Value :=
        dmGen.ProximoId(csGen);
      dmGen.Free;
      dbcbxAtivo.Checked := True;
      dbrTipoCliente.ItemIndex := 0;
      SetStatus('INSERT');
      CompControle;
    except on e : exception do
        SetiMens(0,e.Message);
    end
end;

procedure TfrmClientes_.ProviderFlags;
var
  i : Integer;
  vTab : string;
  vteste : Variant;
begin
  vTab := csTable;
  with (dmMasterDataModule) do
  begin
    for I := 0 to Pred(SetiCds.FieldCount) do
    begin
      //RETORNAR CAPTION
      SetiCds.Fields[i].DisplayLabel :=
        fnTableInforFS8F1(vTab,SetiCds.Fields[i].FieldName,3);
      if (SetiCds.Fields[i].DataType = ftSingle) then //FLOAT
        TFloatField(SetiCds.Fields[i]).DisplayFormat := '#,##0.00';
      if (SetiCds.Fields[i].DataType = ftFMTBcd) then //NUMERIC(15,2)
        TFloatField(SetiCds.Fields[i]).currency := True;

      if (SetiCds.Fields[i].FieldName = 'CNPJCPF') then
      begin
        if dbrTipoCliente.ItemIndex = 0 then
        begin
          TStringField(SetiCds.Fields[i]).EditMask := '000-000-000-00;1;_';
          TStringField(SetiCds.Fields[i]).DisplayWidth := 11;
        end else
        if dbrTipoCliente.ItemIndex = 1 then
        begin
          TStringField(SetiCds.Fields[i]).EditMask := '00-000-000/0000-00;1;_';
          TStringField(SetiCds.Fields[i]).DisplayWidth := 14;
        end;
      end;
      SetiCds.Fields[i].DisplayWidth := 10;
      if (SetiCds.Fields[i].FieldName = 'NOME') then
        SetiCds.Fields[i].DisplayWidth := 20;
      if (SetiCds.Fields[i].FieldName = cdFieldKey_1) then
      begin
        SetiCds.Fields[i].ProviderFlags := [pfInUpdate,pfInWhere,pfInKey];
        //SetiCds.Fields[i].Required := True;
      end else
      begin
        SetiCds.Fields[i].ProviderFlags := [pfInUpdate,pfInWhere];
      end;
    end;

  end;
end;

procedure TfrmClientes_.SetStatus(const Value: string);
begin
    FStatus := Value;
end;

function TfrmClientes_.ValidaCampos : Boolean;
begin
    Result := False;
    try
      if (dbeNome.Text = '') then
      begin
        SetiMens(2,'Informação no campo nome é obrigatório');
        dbeNome.SetFocus;
        Exit;
      end;
      if (dbeCpfCnpj.Text = '') then
      begin
        SetiMens(2,'Informação no campo cpf/cnpj é obrigatório');
        dbeCpfCnpj.SetFocus;
        Exit;
      end;
      Result := True;
    except on e : exception do
        SetiMens(0,e.Message);
    end
end;

procedure TfrmClientes_.sbAbrirClick(Sender: TObject);
begin
    try
      Abrir;
    except on e : exception do
        SetiMens(0,e.Message);
    end
end;

procedure TfrmClientes_.sbCancelClick(Sender: TObject);
begin
    try
      dmMasterDataModule.SetiCds.Cancel;
      dmMasterDataModule.SetiCds.Close;
      SetStatus('INICIAL');
      CompControle;
    except on e : exception do
        SetiMens(0,e.Message);
    end
end;

procedure TfrmClientes_.sbDelClick(Sender: TObject);
begin
    try
      Deletar;
    except on e : exception do
        SetiMens(0,e.Message);
    end
end;

procedure TfrmClientes_.sbInsertClick(Sender: TObject);
begin
    try
      Inserir;
    except on e : exception do
        SetiMens(0,e.Message);
    end
end;

procedure TfrmClientes_.sbSaveClick(Sender: TObject);
begin
    try
      try
        if NOT (ValidaCampos) then
          Exit;
        if (qStatus = 'INSERT') or (qStatus = 'UPDATE') then
        begin
          if (qStatus = 'INSERT') then
          begin
            if (dbcbxAtivo.Checked = True) then
              dmMasterDataModule.SetiCds.FieldByName('STATUS').Value := 'S' else
            dmMasterDataModule.SetiCds.FieldByName('STATUS').Value := 'N';
          end;
          dmMasterDataModule.SetiCds.Post;
          dmMasterDataModule.SetiCds.ApplyUpdates(0);
          SetiMens(1,'Procedimento concluído');
          dmMasterDataModule.SetiCds.Close;
        end;
        SetStatus('INICIAL');
        CompControle;
      finally

      end;
    except on e : exception do
        SetiMens(0,e.Message);
    end
end;

procedure TfrmClientes_.sbUpdateClick(Sender: TObject);
begin
    try
      Editar;
    except on e : exception do
        SetiMens(0,e.Message);
    end
end;

end.
