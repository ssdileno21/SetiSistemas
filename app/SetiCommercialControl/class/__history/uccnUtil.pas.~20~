unit uccnUtil;

interface

uses
  Winsock, Forms, dbctrls, Dialogs, System.SysUtils, Windows, dbgrids, DB,
  Graphics, Classes, ComObj, ADODB, Variants, ComCtrls, DateUtils,Excel2000,
  Math,Grids, Types, Registry, Controls, StrUtils,IdBaseComponent, IdComponent,
  IdIPWatch, ShellAPI, DBClient, IniFiles, MIDASLIB, Messages, StdCtrls,
  Buttons, XMLIntf, XMLDoc, WordXP, System.UITypes, Vcl.Menus, Winapi.Imm,
  Vcl.ActnList, Winapi.MultiMon, System.HelpIntfs, Winapi.DwmApi, Vcl.Themes,
  Vcl.ExtCtrls, Datasnap.Provider, Data.SqlExpr, System.Character, IdHTTP,
  WinInet, uFSDialogs;

  function GetDataBase : string;
  function ValidatedFields(pds:TDataSet): Boolean;
  function SetiUsefulCriptografa(Senha: String): String;
  function fnTableInfor(pTableName:string;pFieldName:string; pReturn:
  Integer): Variant;
  function IsEmptyOrNull(const Value: Variant): Boolean;
  function SetiUserfulRetornaQtdCarct(pValor:String;pTexto:string) : Integer;
  function OnlyNumber(Text: string): boolean;

  procedure gridorders(pGrid:TDBGrid; pColumnSel: TColumn);
  procedure SetiUsefulOrdenaGrid(gGrid:TDBGrid; ColunaSelecionada: TColumn);


implementation

uses udmMasterDataModule;


function GetDataBase: string;
var
    vPath : string;
    vIniFile : TIniFile;
begin
    Result := '';
    try
        vPath := ExtractFilePath(Application.ExeName);
        vPath := vPath + 'conn.ini';
        vIniFile := TIniFile.Create(vPath);
        Result := vIniFile.ReadString('PARAMETROS','PATHCONN','Erro ao ler '+
              'arquivo de conexão');
        vIniFile := nil;
    except on e : exception do
        SetiMens(e.Message,0);
    end;
end;

procedure gridorders(pGrid:TDBGrid; pColumnSel: TColumn);
var
    i:Integer;
    indice: string;
    existe: boolean;
    clientdataset_idx: tclientdataset;
    Cor:TColor;
begin
    try
      Cor := pGrid.Columns[0].Title.Font.Color;
      for i := 0 to pGrid.Columns.Count-1 do
        pGrid.Columns[i].Title.Font.Color := Cor;
      pColumnSel.Title.Font.Color := clRed;
      clientdataset_idx := TClientDataset(
        pColumnSel.Grid.DataSource.DataSet);
      if clientdataset_idx.IndexFieldNames =
          pColumnSel.FieldName then begin
        indice := AnsiUpperCase(pColumnSel.FieldName+'_INV');
        try
          clientdataset_idx.IndexDefs.Find(indice);
          existe := true;
          except
            existe := false;
          end;
        if not existe then
          with clientdataset_idx.IndexDefs.AddIndexDef do begin
            Name := indice;
            Fields := pColumnSel.FieldName;
            Options := [ixDescending];
          end;
        clientdataset_idx.IndexName := indice;
      end else
      clientdataset_idx.IndexFieldNames := pColumnSel.FieldName;
    except on e : exception do
        SetiMens(e.Message,0);
    end;
end;

procedure SetiUsefulOrdenaGrid(gGrid:TDBGrid; ColunaSelecionada: TColumn);
var
    i:Integer;
    indice: string;
    existe: boolean;
    clientdataset_idx: tclientdataset;
    Cor:TColor;
begin
    try
      Cor := gGrid.Columns[0].Title.Font.Color;
      for i := 0 to gGrid.Columns.Count-1 do
        gGrid.Columns[i].Title.Font.Color := Cor;
      ColunaSelecionada.Title.Font.Color := clRed;
      clientdataset_idx := TClientDataset(
        ColunaSelecionada.Grid.DataSource.DataSet);
      if clientdataset_idx.IndexFieldNames =
          ColunaSelecionada.FieldName then begin
        indice := AnsiUpperCase(ColunaSelecionada.FieldName+'_INV');
        try
          clientdataset_idx.IndexDefs.Find(indice);
          existe := true;
          except
            existe := false;
          end;
        if not existe then
          with clientdataset_idx.IndexDefs.AddIndexDef do begin
            Name := indice;
            Fields := ColunaSelecionada.FieldName;
            Options := [ixDescending];
          end;
        clientdataset_idx.IndexName := indice;
      end else
      clientdataset_idx.IndexFieldNames := ColunaSelecionada.FieldName;
    except on e : exception do
      SetiMens(e.Message,0);
    end;
end;

function ValidatedFields(pds:TDataSet): Boolean;
var
  i :Integer;
  Fields :TStrings;
  count : Integer;
  countflast : Integer;
  countEmp : Integer;

begin
    Result := False;
  try
    Fields := TStringList.Create;
    count := 0;
    countflast := 0;
    countEmp := 0;
    countflast := pds.FieldCount;
    Fields.Insert(0, 'Preencha os campos obrigatórios:');
    for i := 0 to pds.Fields.Count-1 do
    begin
      count := count + 1;
      if (pds.Fields[i].Tag=1) then
        if (pds.Fields[i].AsString = EmptyStr) then
        begin
          if count = 1 then
            Fields.Add('* ' + pds.Fields[i].DisplayName)
          else
            Fields.Add('* ' + pds.Fields[i].DisplayName+';');
          countEmp := countEmp + 1;
        end;
    end;
  finally
    if countEmp > 0 then
    begin
      ShowMessage(Fields.Text);
    end else
    Result := True;
    Fields.Free;
  end;
end;

function SetiUsefulCriptografa(Senha: String): String;
  var i: Integer;
      s: String[255];
      c: array [0..255] of Byte absolute s;
begin
    try
       s := Senha;
       for i := 1 to Ord(s[0]) do
         c[i] := (356 * (Length(Senha) * i)) Xor c[i];
       Result := s;
    except on e : exception do
      SetiMens(e.Message,0);
    end;
end;

function fnTableInfor(pTableName:string;pFieldName: string; pReturn:
Integer ): Variant;
begin
  case pReturn of
    1 : Result := '';
    2 : Result := '';
    3 : Result := '';
    4 : Result := '';
    5 : Result := 'N';
    6 : Result := -1;
    7 : Result := '';
  end;
  try
    try
      dmMasterDataModule := TdmMasterDataModule.Create(Nil);
      Result := dmMasterDataModule.fnTableInforDM
                                (
                                  pTableName,
                                  pFieldName,
                                  pReturn
                                );
    finally
      dmMasterDataModule.Free;
    end;
  except on e : exception do
    SetiMens(e.Message,0);
  end;
end;

function IsEmptyOrNull(const Value: Variant): Boolean;
begin
  Result := VarIsClear(Value) or
              VarIsEmpty(Value) or
                VarIsNull(Value) or
                  (VarCompareValue(Value, Unassigned) = vrEqual);
  if (not Result) and VarIsStr(Value) then
    Result := Value = '';
end;

function SetiUserfulRetornaQtdCarct(pValor:String;pTexto:string) : Integer;
var
  i, t : Integer;
  vValor, vTexto : string;
begin
  Result := 0;
  if (Length(pValor) > 1) or (Length(pValor) = 0) then
    Exit else
  begin
      vValor := UpperCase(pValor);
      t := Length(pTexto);
      if t = 0 then
        Exit else
      begin
        vTexto := UpperCase(pTexto);
        i := 1;
        while i <= t do
        begin
            Result := Result + Pos(vValor,vTexto[i]);
          i := i + 1;
        end;
      end;
  end;
end;

function OnlyNumber(Text: string): boolean;
var
  i: integer;
begin
  Result := False;
    for i := 1 to length(text) do
    if text[i] in ['0'..'9'] then
    begin
      result:= True;
    end else
    begin
      Result := False;
      Exit;
    end;
end;


end.
