unit uSetiConnects;

interface

uses ADODB, Dialogs, SysUtils, Forms, uMess, MIDASLIB, uSetiConfig, DB, SqlExpr;

type
  TSetiConnects = class
  private
    AdoConn : TADOConnection;
    SqlConn : TSQLConnection;
  public
    constructor Create;
    function Connected : Boolean;
    function ConnectsSQLSERVER:  TADOConnection;
    function ConnectsFIREBIRD(Framework:Boolean):  TSQLConnection;
    procedure Disconnects;
  end;

implementation

{ TSetiFrameworkConnects }

constructor TSetiConnects.Create;
begin
    try
      //
    except on e : exception do
        SetiMens(0,e.Message);
    end;
end;

procedure TSetiConnects.Disconnects;
begin
    try
        if (SConfigTypeDB = 'TADO') then
        begin
            if Assigned(AdoConn) then
            begin
                AdoConn.Free;
            end;
        end;
        if (SConfigTypeDB = 'TSQL') then
        begin
            if Assigned(SqlConn) then
            begin
                SqlConn.Free;
            end;
        end;
    except on e : exception do
        SetiMens(0,e.Message);
    end;
end;

function TSetiConnects.Connected: Boolean;
begin
    try
        Result := False;
        if (SConfigTypeDB = 'TSQL') then
        begin
            if (NOT (Assigned(SqlConn))) then
            begin
              try
                  ConnectsFIREBIRD(False);
                  if (SqlConn.Connected) then
                    Result := True;
              finally
                SqlConn.Free;
              end;
            end else
            begin
              if (SqlConn.Connected) then
                Result := True;
            end;
        end;
    except on e : exception do
        SetiMens(0,e.Message);
    end;
end;

function TSetiConnects.ConnectsFIREBIRD(Framework:Boolean): TSQLConnection;
var
  bdPath : string;
begin
    try
        Result := NIL;
        if (SConfigTypeDataBase = 'TSQL') then
        begin
          SqlConn  :=  TSQLConnection.Create(nil);
          bdPath := SConfigGetDataBase(Framework);
          with SqlConn do
          begin
            ConnectionName := 'FBConnection';
            DriverName := 'Firebird';
            GetDriverFunc := 'getSQLDriverINTERBASE';
            LibraryName := 'dbxfb.dll';
            LoginPrompt := False;
            Params.Values['DriverName']         := 'Firebird';
            Params.Values['Database']           := bdPath;
            Params.Values['RoleName']           := 'RoleName';
            Params.Values['User_Name']          :=
              SConfigFirebirdParamsUserName;
            Params.Values['Password']           :=
              SConfigFirebirdParamsPassword;
            Params.Values['ServerCharSet']      := '';
            Params.Values['SQLDialect']         := '3';
            Params.Values['ErrorResourceFile']  := '';
            Params.Values['LocaleCode']         := '0000';
            Params.Values['BlobSize']           := '-1';
            Params.Values['CommitRetain']       := 'False';
            Params.Values['WaitOnLocks']        := 'True';
            Params.Values['IsolationLevel']     := 'ReadCommitted';
            Params.Values['Trim Char']          := 'False';
            VendorLib := 'fbclient.dll';
            Connected := True;
          end;
            SqlConn.Connected := True;
            Result := SqlConn;
        end;
    except on e : exception do
        SetiMens(0,e.Message);
    end
end;

function TSetiConnects.ConnectsSQLSERVER: TADOConnection;
begin
     try
        Result := AdoConn;
        if (SConfigTypeDataBase = 'TADO') then
        begin
            AdoConn  :=  TADOConnection.Create(nil);
            AdoConn.ConnectionString := SConfigSqlServerConectionString;
            AdoConn.LoginPrompt := False;
            AdoConn.Connected := True;
            Result := AdoConn;
        end;
    except on e : exception do
        SetiMens(0,e.Message);
    end
end;

end.
