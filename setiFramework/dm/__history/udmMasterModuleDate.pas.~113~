unit udmMasterModuleDate;

interface

uses
  System.SysUtils, System.Classes, Data.FMTBcd, Datasnap.DBClient, SimpleDS,
  Data.SqlExpr, Data.DB, uSetiConnects, Datasnap.Provider, Data.Win.ADODB,
  Dialogs;

type
  TdmMasterModuleDate = class(TDataModule)
    SetiSqlConnection: TSQLConnection;
    SetiSqlDataSet: TSQLDataSet;
    SetiSqlQuery: TSQLQuery;
    SetiDs: TDataSource;
    SetiCds: TClientDataSet;
    SetiDsp: TDataSetProvider;
    SetiSqlHelp: TSQLQuery;
    SetiCdsHelp: TClientDataSet;
    SetiDspHelp: TDataSetProvider;
    SetiSqlStoredProc: TSQLStoredProc;
    procedure DataModuleCreate(Sender: TObject);
    procedure DataModuleDestroy(Sender: TObject);

  private
    { Private declarations }
    FConnects : TSetiConnects;
  public
    { Public declarations }
    procedure UseComponentsDmSeti(idComponent:Integer=-1;ItsFramework:
    Boolean=False);
    function TableExists(pTableName:string) : Boolean;
    function TableInfor(pTableName:string='';pFieldName:string = '';
    pReturn:Integer=-1) : Variant;
    function GetInforId(pTableName:string;pFieldId:string;pFieldDesc:string;
    pFieldValue:string) : Integer;
    function GetInforDescr(pTableName:string;pFieldId:string;pFieldDesc:string;
    pFieldValue:Integer) : string;
    function GetFieldInforId(pTableName:string;pFieldId:string;pFieldDesc:
    string;pFieldValue:String) : Integer;
  published
    property qConnects : TSetiConnects read FConnects write FConnects;
  end;

var
  dmMasterModuleDate: TdmMasterModuleDate;

implementation

uses uMess, uSetiConfig;

{$R *.dfm}

procedure TdmMasterModuleDate.DataModuleCreate(Sender: TObject);
begin
    try
        qConnects := TSetiConnects.Create;
    except on e : exception do
        SetiMens(0,e.Message);
    end;
end;

procedure TdmMasterModuleDate.DataModuleDestroy(Sender: TObject);
begin
    try
        qConnects.Free;
    except on e : exception do
        SetiMens(0,e.Message);
    end;
end;

function TdmMasterModuleDate.GetFieldInforId(pTableName, pFieldId, pFieldDesc,
  pFieldValue: String): Integer;
var
  vParam : string;
begin
    try
      Result := -1;
      if (SConfigTypeDB = 'TSQL') then
      begin
        if (pTableName <> '') and (pFieldId <> '') and (pFieldDesc <> '')
        and (pFieldValue <> '') then
        begin
          UseComponentsDmSeti(1);
          with (SetiSqlQuery) do
           begin
            vParam := QuotedStr(pFieldValue);
            SQL.Clear;
            SQL.Add('SELECT FIRST 1 '+pFieldId +' ');
            SQL.Add('FROM '+pTableName +' ');
            //SQL.Add('WHERE '+pFieldDesc+ ' = :PDESC ');
            SQL.Add('WHERE '+pFieldDesc+ ' = '+vParam);
            //SetiCds.FetchParams;
           { SetiCds.Params.CreateParam(ftString,'PDESC',ptInput);
            Params.ParamByName('PDESC').AsString := vParam;
            ShowMessage(sql.Text);
            ShowMessage(Params.ParamByName('PDESC').Value);  }
            SetiCds.Open;
            if NOT (SetiCds.IsEmpty) then
              Result := SetiCds.FieldByName(pFieldId).Value;
            Close;
           end
        end;
      end;
    except on e : exception do
        SetiMens(0,e.Message);
    end;
end;

function TdmMasterModuleDate.GetInforDescr(pTableName:string;pFieldId:string;
pFieldDesc:string; pFieldValue:Integer): string;
begin
    try
        if (SConfigTypeDB = 'TSQL') then
        begin
          if (pTableName <> '') and (pFieldId <> '') and (pFieldDesc <> '')
          and (pFieldValue > -1) then
          begin
            UseComponentsDmSeti(1);
            with (SetiSqlQuery) do
             begin
              SQL.Add('SELECT FIRST 1 '+pFieldDesc +' ');
              SQL.Add('FROM '+pTableName +' ');
              SQL.Add('WHERE '+pFieldId+ ' = :ID ');
              Params.ParamByName('ID').Value := pFieldValue;
              SetiCds.Open;
              if NOT (SetiCds.IsEmpty) then
                Result := SetiCds.FieldByName(pFieldDesc).Value;
              Close;
             end
          end;
        end;
    except on e : exception do
        SetiMens(0,e.Message);
    end;
end;

function TdmMasterModuleDate.GetInforId(pTableName, pFieldId, pFieldDesc,
  pFieldValue: string): Integer;
begin

end;

function TdmMasterModuleDate.TableInfor(pTableName:string;pFieldName:string;
pReturn:Integer ): Variant;
var
  vTableName, vFieldName, vFieldReturn : string;
begin
  Result := False;

  if (pTableName = '') then
    Exit;

  if (pFieldName = '') and (pReturn <> 0) then
    Exit;

  vTableName := UpperCase(pTableName);
  vFieldName := UpperCase(pFieldName);

  {
    Retornos:
      0 :  TABLE        - TABELA
      1 :  FIELD        - CAMPO
      2 :  TYPE         - TIPO DO CAMPO
      3 :  CAPTION      - CAPTION
      4 :  FIXED VALUE  - VALORES FIXOS
      5 :  MANDATORY    - CAMPO OBRIGATÓRIO
      6 :  LENGTH       - TAMANHO DO CAMPO
      7 :  DEFAULT      - POSSUI VALOR DEFAULT
  }

  case pReturn of
    1 : vFieldReturn := 'FIELDNAME_';
    2 : vFieldReturn := 'FIELDTYPE_';
    3 : vFieldReturn := 'FIELDCAPTION_';
    4 : vFieldReturn := 'FIELDFIXEDVALUE_';
    5 : vFieldReturn := 'FIELDFILLINGMANDATORY_';
    6 : vFieldReturn := 'FIELDLENGTH_';
    7 : vFieldReturn := 'FIELDDEFAULTVALUE_';
  end;

  try
    try
      vVal := False;
      if (SConfigTypeDB = 'TSQL') then
      begin
        UseComponentsDmSeti(1);
        with (SetiSqlQuery) do
        begin
          Close;
          SQL.Clear;
          SQL.Add('SELECT                          ');
          SQL.Add('        FIELDNAME_,             ');
          SQL.Add('        FIELDTYPE_,             ');
          SQL.Add('        FIELDCAPTION_,          ');
          SQL.Add('        FIELDFIXEDVALUE_        ');
          SQL.Add('        FIELDFILLINGMANDATORY_  ');
          SQL.Add('        FIELDLENGTH_,           ');
          SQL.Add('        FIELDSUBTYPE_,          ');
          SQL.Add('        FIELDSEGMENTLENGTH_,    ');
          SQL.Add('        FIELDPRECISION_,        ');
          SQL.Add('        FIELDSCALE_,            ');
          SQL.Add('        FIELDDEFAULTVALUE_,     ');
          SQL.Add('        FIELDREQUIREDFLAG_,     ');
          SQL.Add('        FIELDDESCRIPTION_,      ');
          SQL.Add('FROM SP_FIELDSFORSEARCH         ');
          SQL.Add('(:TABLENAME)                    ');
          Params.ParamByName('TABLENAME').Value := pTableName;
          SetiCds.Open;
        end;
        if (pReturn = 0) then
          vVal := (NOT (SetiCds.IsEmpty)) else
        if (pReturn in [1,2,3,4,5,6,7]) then
        begin
          SetiCds.Close;
          SetiCds.Filtered := False;
          SetiCds.Filter := 'FIELDNAME_ = '+QuotedStr(vFieldName);
          SetiCds.Filtered := True;
          SetiCds.Open;
          {
            Retornos:
              0 :  TABLE        - TABELA
              1 :  FIELD        - CAMPO
              2 :  TYPE         - TIPO DO CAMPO
              3 :  CAPTION      - CAPTION
              4 :  FIXED VALUE  - VALORES FIXOS
              5 :  MANDATORY    - CAMPO OBRIGATÓRIO
              6 :  LENGTH       - TAMANHO DO CAMPO
              7 :  DEFAULT      - POSSUI VALOR DEFAULT
          }
          if NOT (SetiCds.IsEmpty) then
          begin
            if (pReturn in [1,2,3,4,5]) then
              Result := SetiCds.FieldByName(vFieldReturn).AsString;
            if (pReturn in [6]) then
              Result := SetiCds.FieldByName(vFieldReturn).AsInteger;
            if (pReturn in [7]) then
              if (SetiCds.FieldByName(vFieldReturn).AsString <> '') then
                Result := 'S' else Result := 'N';
          end;
          SetiCds.Filtered := False;
        end;
      end;
    finally
      Result := vVal;
    end;
    except on e : exception do
        SetiMens(0,e.Message);
    end;
end;

function TdmMasterModuleDate.TableExists(pTableName: string): Boolean;
begin
    try
      try
          if (SConfigTypeDB = 'TSQL') then
          begin
            if (pTableName <> '') then
            begin
              UseComponentsDmSeti(1);
              with (SetiSqlQuery) do
               begin
                SQL.Add('SELECT RDB$RELATION_NAME             ');
                SQL.Add('FROM RDB$RELATIONS                   ');
                SQL.Add('WHERE RDB$SYSTEM_FLAG = 0            ');
                SQL.Add('AND RDB$RELATION_NAME = :TABLENAME   ');
                Params.ParamByName('TABLENAME').Value := pTableName;
                SetiCds.Open;
                Result := (NOT (SetiCds.IsEmpty));
                Close;
               end
            end;
          end;
    finally
      if Assigned(SetiSqlConnection) then
        SetiSqlConnection.Free;
    end;
    except on e : exception do
        SetiMens(0,e.Message);
    end;
end;

procedure TdmMasterModuleDate.UseComponentsDmSeti(idComponent: Integer;
  ItsFramework: Boolean);
begin
    try
        if (SConfigTypeDB = 'TSQL') then
        begin
          SetiSqlConnection := qConnects.ConnectsFIREBIRD(ItsFramework);
          if (idComponent in [0,1]) then  //SQLQRY AND CDS
          begin
              SetiSqlQuery.SQLConnection := SetiSqlConnection;
              SetiSqlQuery.Close;
              SetiSqlQuery.SQL.Clear;
              if (idComponent in [1]) then //CDS
              begin
                SetiDsp.DataSet := SetiSqlQuery;
                SetiCds.ProviderName := SetiDsp.Name;
              end;
          end;
          if (idComponent in [3]) then //STORED PROCEDURE
          begin
              SetiSqlStoredProc.SQLConnection := SetiSqlConnection;
              SetiSqlStoredProc.StoredProcName := '';
          end;
          if (idComponent in [4,5]) then  //SQLQRY AND CDS HELP
          begin
            SetiSqlHelp.SQLConnection := SetiSqlConnection;
            SetiSqlHelp.Close;
            SetiSqlHelp.SQL.Clear;
            if (idComponent in [5]) then //CDS HELP
            begin
              SetiDspHelp.DataSet := SetiSqlHelp;
              SetiCdsHelp.ProviderName := SetiDspHelp.Name;
            end;
          end;
        end;
    except on e : exception do
        SetiMens(0,e.Message);
    end;
end;

end.
